const express = require('express');
const mysql = require('mysql');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors()); // Esto habilitará CORS para todas las rutas

// Conexión a la base de datos de XAMPP
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root', // usuario por defecto de XAMPP
    password: '', // sin contraseña por defecto de XAMPP
    database: 'taskmasterdb'
});

db.connect((err) => {
    if(err) throw err;
    console.log('Conectado a la base de datos');
});

// Ruta de registro
app.post('/register', (req, res) => {
    const { username, password, email } = req.body;
    
    // Encriptar la contraseña antes de guardarla en la base de datos
    bcrypt.hash(password, 10, (err, hash) => {
        if (err) {
            return res.status(500).send({ message: err });
        }

        // Insertar el nuevo usuario en la base de datos
        db.query('INSERT INTO users (username, password, email) VALUES (?, ?, ?)', [username, hash, email], (error, results) => {
            if (error) {
                return res.status(500).send({ message: error });
            }
            res.status(201).send({ message: 'Usuario registrado correctamente.' });
        });
    });
});


// Ruta de inicio de sesión
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    
    // Buscar al usuario por su nombre de usuario
    db.query('SELECT * FROM users WHERE username = ?', [username], (error, results) => {
        if (error) {
            return res.status(500).send({ message: error });
        }
        if (results.length == 0) {
            return res.status(401).send({ message: 'Nombre de usuario no encontrado.' });
        }

        // Comparar la contraseña enviada con la almacenada en la base de datos
        bcrypt.compare(password, results[0].password, (err, isMatch) => {
            if (err) {
                return res.status(500).send({ message: err });
            }
            if (!isMatch) {
                return res.status(401).send({ message: 'Contraseña incorrecta.' });
            }

            // La contraseña es correcta, crear un token JWT
            const token = jwt.sign({ id: results[0].id }, 'tu_super_secreto', { expiresIn: '8h' });

            // Enviar el token al cliente
            res.send({ message: 'Inicio de sesión correcto', token });
        });
    });
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Servidor corriendo en el puerto ${PORT}`);
});
